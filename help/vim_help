BEGIN_VIM_HELP_FILE
---------------------------------------------------------
:help vim-modes

:help motion.txt
    :help object-select

A list of all commands for each mode, with a tag and a short description.
:help index
---------------------------------------------------------
set makeprg=g++\ \"%\"
---------------------------------------------------------
<nop>   no operation

---------------------------------------------------------
Buffer local options and mappings

:setl[ocal] ...         Like ":set" but set only the value local to the
                        current buffer or window.

:nnoremap <buffer> <leader>x dd
    The <buffer> in the second nnoremap command told Vim to only 
    consider that mapping when we're in the buffer where we defined it.

local options and mappings have higher precedence (ie
global options and mappings are shadowed or overriden)

:help local-options
:help setlocal
:help map-local
---------------------------------------------------------
Autocommands
    are a way to tell Vim to run certain commands whenever certain events happen. 

Example1:
    :autocmd BufNewFile * :write
    ^          ^ ^
    |          | |
    |          | The command to run.
    |          |
    |          A "pattern" to filter the event.
    |
    The "event" to watch for.

Exmple events: Below are tiny sample of the available events:
    Starting to edit a file that doesn't already exist.
    Reading a file, whether it exists or not.
    Switching a buffer's filetype setting.
    Not pressing a key on your keyboard for a certain amount of time.
    Entering insert mode.
    Exiting insert mode.

Example2:
    :autocmd BufWritePre *.html :normal gg=G

    BufWritePre -  the event will be checked just before you write any file.
    :normal gg=G will tell Vim to reindent the current file.

Example3: Multiple Events
    :autocmd BufWritePre,BufRead *.html :normal gg=G

Example4:
    Turn line wrapping off whenever you're working on an HTML file.

    :autocmd BufNewFile,BufRead *.html setlocal nowrap

    A common idiom in Vim scripting is to pair the BufRead and BufNewFile events together 
    to run a command whenever you open a certain kind of file, regardless of whether it 
    happens to exist already or not.

FileType Events
    One of the most useful events is the FileType event.
    This event is fired whenever Vim sets a buffer's filetype.

    :autocmd FileType javascript nnoremap <buffer> <localleader>c I//<esc>
    :autocmd FileType python     nnoremap <buffer> <localleader>c I#<esc>

:help autocmd-events

---------------------------------------------------------
Buffer-Local Abbreviations

:iabbrev <buffer> --- &mdash;
:autocmd FileType python     :iabbrev <buffer> iff if:<left>
:autocmd FileType javascript :iabbrev <buffer> iff if ()<left>

---------------------------------------------------------
Grouping Autocommands
When you use augroup multiple times Vim will combine the groups each time.

:augroup testgroup
:    autocmd BufWrite * :echom "Foo"
:    autocmd BufWrite * :echom "Bar"
:augroup END

Clearing Groups

:augroup testgroup
:    autocmd!
:    autocmd BufWrite * :echom "Cats"
:augroup END

:help autocmd-groups

---------------------------------------------------------
Operator-Pending Mappings

An operator is a command that waits for you to enter a movement command, and then does 
something on the text between where you currently are and where the movement would take you.

:help omap-info

Examples:
    1) map inside parenthesis selection operator to p
    :onoremap p i(

    2) map motion from current position until return is found to b
    :onoremap b /return<cr>

    3)
    :onoremap il( :<c-u>normal! F)vi(<cr>
    explanation bisect :
        <c-u> - half page UP
        F) find backward )
        vi( visual select inside parenthensis
        <cr> carriage return
---------------------------------------------------------
Execute
    The execute command takes a Vimscript string and performs it as a command.

    :execute "write"
    Vim will write your file, just as if you had typed :write<cr>

---------------------------------------------------------
g_ move to the last non-blank character of the current line
---------------------------------------------------------
:nohlsearch
    clears the search highlighting from the search we just performed so it's not distracting
---------------------------------------------------------
statusline

:help statusline

    %f  path to the file
    %y  FileType of the file
    %l  current line
    %L  total lines
---------------------------------------------------------
vimscript
    variables
    :let foo = 42
    :let foo = "bar"
    :echo foo

    Options as variables
    :set textwidth=80
    :echo &textwidt

    :set nowrap
    :echo &wrap

    We can also set options as variables using the let command.
    :let &textwidth = 100
    :set textwidth?

    Local options
    :let &l:number = 1

    Registers as variables
    :let @a = "something in register a"
    :echo @a

    Variable scope
    :help internal-variables

    Conditionals
    --------------------
    Vim will execute the body of an if statement when its condition evaluates to a non-zero integer, after all coercion takes place.
    Strings that start with a number are coerced to that number, otherwise they're coerced to 0.

    :if 0
    :    echom "if"
    :elseif "nope!"
    :    echom "elseif"
    :else
    :    echom "finally!"
    :endif

    Comparison operators
    --------------------
    :help expr4 to see all the available comparison operators

    The behavior of == depends on a user's settings example: :set ignorecase
    ==? is the "case-insensitive no matter what the user has set" comparison operator
    ==# is the "case-sensitive no matter what the user has set" comparison operator.

    Functions
    -------------
    :help functions
    :help call
    :help return

    :function Meow()
    :  echom "Meow!"
    :endfunction

    Vimscript functions must start with a capital letter if they are unscoped!

    function argument scope a:

    Varargs
    -------
    :function Varg(...)
    :  echom a:0
    :  echom a:1
    :  echo a:000
    :endfunction

    The ... in the function definition tells Vim that this function can take any number of arguments. 
    a:0 will be set to the number of extra arguments you were given
    You can use a:1, a:2, etc to refer to each extra argument your function receives.
    a:000 will be set to a list containing all the extra arguments that were passed

---------------------------------------------------------
gJ			Join [count] lines, with a minimum of two lines.
			Don't insert or remove any spaces.  {not in Vi}
---------------------------------------------------------
string functions
    strlen, len, split, join, tolower, toupper
---------------------------------------------------------
:help Float
:help floating-point-precision
---------------------------------------------------------

Substituting by \n inserts a null character into the text.
To get a newline, use \r.
When searching for a newline, you’d still use \n, however.
This asymmetry is due to the fact that \n and \r do slightly different things:

\n matches an end of line (newline), whereas \r matches a carriage return.
On the other hand, in substitutions \n inserts a null character whereas \r inserts a newline 
(more precisely, it’s treated as the input <CR>)

---------------------------------------------------------
:set formatoptions?

If wanted, auto commenting can be disabled for all files with:
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

http://vim.wikia.com/wiki/Disable_automatic_comment_insertion
---------------------------------------------------------

Wildcards in {file}
?       matches one character
*       matches anything, including nothing
**      matches anything, including nothing, recurses into directories
[abc]   match 'a', 'b' or 'c'

---------------------------------------------------------
Insert the contents of a register
:help i_CTRL-R
    CTRL-R CTRL-W   - 
    CTRL-R %    current file name
    If you have literal control characters in what you have yanked, use Ctrl-R, Ctrl-O, "
---------------------------------------------------------
:help registers

Registers
    0 (yank register: when you use y in normal mode, without specifying a register, 
            yanked text goes there and also to the default register)

    1 to 9 (shifting delete registers, when you use commands such as c or d,
             what has been deleted goes to register 1, what was in register 1 goes to register 2, etc.)

    " (default register, also known as unnamed register. This is where the " comes in Ctrl-R, ")

    a to z for your own use (capitalized A to Z are for appending to corresponding registers)

    _ (acts like /dev/null (Unix) or NUL (Windows), you can write to it but it's discarded and when you read from it, it is always empty)

    - (small delete register)

    / (search pattern register, updated when you look for text with /, ?, * or # for instance;
            you can also write to it to dynamically change the search pattern)

    : (stores last VimL typed command via Q or :, readonly)

    + and * (system clipboard registers, you can write to them to set the clipboard and read the clipboard contents from them)

Using registers with :@ to play commands stored in the register
    for more help :help :@
    :@"<CR>     (execute commands stored in the default register)
---------------------------------------------------------
Special registers:
'"''    the unnamed register, containing the text of
the last delete or yank
'%' the current file name
'#' the alternate file name
'*' the clipboard contents (X11: primary selection)
'+' the clipboard contents
'/' the last search pattern
':' the last command-line
'-' the last small (less than a line) delete
'.' the last inserted text

    Copy the entire buffer to the system clipboard  :%y+

---------------------------------------------------------
Macros
    If you have recorded a macro with qa...q, then 
    :echo @a will tell you what you have typed, and @a will replay the macro

    For more help :help q or :help @

    qaq to reset the a register storing an empty macro inside it
---------------------------------------------------------
vim  * -c "argdo norm @a"
---------------------------------------------------------

:helptags ~/.vim/doc 
---------------------------------------------------------
Open quickfix windows for history
q:  # Open quickfix window for history of ex commands
q/  # Open quickfix window for history of / search
q?  # Open quickfix window for history of ? search
---------------------------------------------------------
change list

:changes
g;  old changes
g,  new change
---------------------------------------------------------
jump list

:jumps
CTRL+O          old 
CTRL+i or TAB   new
---------------------------------------------------------
#Redirection of changes
:set nomore
:redir > c.txt
:changes
:redir END
:set more
:e c.txt
---------------------------------------------------------
Highlight more than one Pattern (match more than one pattern)
:match HighLightGroup /{pattern}/
    Exaple: :mat[ch] Search /{pattern}/
:mat none
:2mat
:3mat
---------------------------------------------------------
help multi  #multiple pattern
---------------------------------------------------------
help starstar-wildcard  
---------------------------------------------------------
clipboard paste
set paste
set noai nosi noci
set noautoindent nosmartindent nocindent
---------------------------------------------------------
F9  compile and build single input c/c++ source
\rr     Run the exe built from the current source

\rcc    Run static analysis CppCheck on current source
---------------------------------------------------------
on the fly json_reformat of current opended file
:%!json_reformat

sort the file content
:%!sort
---------------------------------------------------------
Cursor on filename - gF goto the File in vim editor
---------------------------------------------------------
:read file_path
:read !cmd
---------------------------------------------------------
set relativenumber             " Show relative line numbers
or set rnu - on
set rnu! - off

---------------------------------------------------------

:help pattern-overview

search patterns
    \<      represents the beginning of a word
    \>      represents the end of a word
    \w      one or more word characters
    \s      matches space or tab
    \_s     matches space or tab or newline (end-of-line character)
    \|      to search for something or something else.
    \( and \) respectively specify the beginning and end of a group

Examples:
1) :%s/red\|green\|blue/purple/g
    To replace all instances of "red" or "green" or "blue" with "purple".
    However, the above pattern finds "red" in "bored", so the substitute would change "bored" to "bopurple".
2) 
    If above 1) is not what you want, use the following pattern to find only the whole words "red" or "green" or "blue"
    \<\(red\|green\|blue\)\>

3) \<red\|green\|blue\>
    without escaped parentheses, would find "red" occurring at the beginning of a word,
    or "green" occurring anywhere, or "blue" occurring at the end of a word).

---------------------------------------------------------
substitue pattern match

In a substitute, you can use & in the replacement to mean the "whole matched pattern" (everything that was found).

For example, the following will insert quotes around all occurrences of the whole words "red" and "green" and "blue":

:%s/\<\(red\|green\|blue\)\>/"&"/g

If you do not want the whole matched pattern, you can use parentheses to group text in the search pattern, and 
use the replacement variable \1 to specify the first group. 

For example, the following finds "color x" and replaces it with "colored x" where x is the whole word "red" or "green" or "blue":

:%s/color \<\(red\|green\|blue\)\>/colored \1/g

---------------------------------------------------------
The common arglist commands

:arg            to show the files in your current arglist
:argdo          to run a command on your arglist

:argadd or 
:arga           to add files to your arglist

:argdelete or 
:argd           to remove files from your arglist
    :argd *     clear arglist

:argdo update   to save all changes to your arglist
:argdo undo     to undo changes to your arglist

Example:
    :args `find . -name '*.json' -type f`
    or
    :args **/*.json
---------------------------------------------------------

'|' can be used to separate commands, so you can give multiple commands in one
line.  If you want to use '|' in an argument, precede it with '\'

help :\|
help :\bar

For example:
    %s/htm/html/c | %s/JPEG/jpg/c | %s/GIF/gif/c

If you want to chain commands form the vimrc file, then you need to user <bar> instead of | like this:
    map <F6> <ESC>:echo "test" <bar> :echo "test2"

---------------------------------------------------------
string concatenate operator
    . is the "concatenate strings" operator in Vim
---------------------------------------------------------
to see the escape sequences you can use in strings.
:help expr-quote 

 a way to insert a tab character into a string without using an escape sequence. 
 :help i_CTRL-V

 :help literal-string

---------------------------------------------------------
"QuickFix and LocationList

:help quickfix 
"In Vim the quickfix commands are used more generally to 
find a list of positions in files."  

:help location-list 
"A location list is similar to a quickfix list and 
contains a list of positions in files.  A location list 
is associated with a window and each window can have a 
separate location list." 

The location list commands are similar to the quickfix commands,
replacing the 'c' prefix in the quickfix command with 'l'.

You can create and add entries to the location list using different 
methods (similar to that used for the quickfix list). 
1. :lfile <file> - load the location list with entries from a file. 
2. :laddfile <file> - add entries to the location list 
3. :laddbuffer <bufnr> - add entries from current buffer 
4. :lexpr <expr> - Add an entry resulting from the expression 

Use the setloclist() and getloclist() functions to modify the location list. 

Using the above commands and functions you can implement the 
marks per window or buffer feature you have described above. 
A little bit of history behind the location list feature: I proposed a patch 
for the ":qtag" (now called ":ltag") command few years ago that added all the 
matching tags to the quickfix list. Bram suggested that it is better to add 
support for location lists and use it so that it can be used for new per-window 
features. This lead to the implementation of the location list feature and the 
improvement of the quickfix feature. 

---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
Vim KT (Knowledge Transfer)
Plug-ins
1)	Netrw – comes by default
2)	Vim cscope plug-in  :cs           or   commands with Ctrl+\+s   (symbol lookup) etc check your plugin .vim/plugin/cscope_maps.vim
3)	Tlist plugin                   Ctrh+H
4)	Quick Fix window : F6  and traverse entries F7 and F8  
Quick fix window during 
    1)	cscope tag explore or 
    2)	traverse make errors or 
    3)	search files
        Forgot to mention : vim built-in search is more powerful
        Example: search all cpp files in all sub-dirs for symbol ActonPlanMgr
                :vimgrep ActonPlanMgr **/*.cpp
        Then u can open results in quick fix window by F6 or goto next entry by F8 or previous entry by F7
5)	vim omni completion 
    U need to have tags file generated and load (see set tags in .vimrc)
        Ctrl-X+Ctrl-O then Ctrl-N and Ctrl-P
        Something in .vimrc makes auto completion after -> or . for objects or struct

6)	Another thing I forgot to mention, vim capability to edit files remotely – very useful when changing config in multiple remote  locations
    vim scp://root@10.1.242.109/.bashrc             # open for edit
    vim –R scp://root@10.1.242.109/.bashrc       #open for read only 
    vim scp://root@10.1.242.109///usr/share/idirect/cluster/resources/NOC.nms.res   #other than home dir
    vim scp://root@10.1.242.109///usr/share/idirect/cluster/resources/              #open full directory listing. Must end with /
---------------------------------------------------------

---------------------------------------------------------

Search and replace in multiple buffers

:argdo (all files in argument list), or :bufdo (all buffers), or :tabdo (all tabs), or :windo (all windows in the current tab).

ALL Buffers
---------
The following performs a search and replace in all buffers (all those listed with the :ls command):

:bufdo %s/pattern/replace/ge | update

    bufdo	Apply the following commands to all buffers.
    %s	Search and replace all lines in the buffer.
    pattern	Search pattern.
    replace	Replacement text.
    g	Change all occurrences in each line (global).
    e	No error if the pattern is not found.
    |	Separator between commands.
    update	Save (write file only if changes were made).
    The command above uses :update to save each buffer, if it was changed. By default, Vim will not switch away from a buffer if it has been changed.

One alternative is to set the 'autowriteall' option so changed buffers are automatically saved when required:

:set autowriteall
:bufdo %s/pattern/replace/ge

Another alternative is to set the 'hidden' option so buffers do not need to be saved, then use :wa to save all changes (only changed buffers are written):

:set hidden
:bufdo %s/pattern/replace/ge
:wa
If you don't wish to save the results of your replacement, but want to review each changed buffer first,
you can force the bufdo to continue without saving files with bufdo!:

:bufdo! %s/pattern/replace/ge

All windows
---------
If you are not dealing with a lot of files, it can be useful to display each wanted file in its own window, then operate on each window.
For example, after opening multiple files with a shell command like gvim *.c, you could choose which files you wanted to operate on like this:

:sball	Split screen to show all buffers (one window per buffer).
...	Move to a window you do not want to change.
<C-w>c	Close the window (press Ctrl-W then c).
<C-w>T<C-PageUp>	Or, move the window to a new tab page, then switch back to the original tab.

...	Repeat until only buffers you want to change are displayed in the current tab page.

:windo %s/pattern/replace/ge	Search and replace in all visible windows.
:wa	Save all changes.

All files in a tree
-------------------------
Suppose all *.cpp and *.h files in the current directory need to be changed (not subdirectories). One approach is to use the argument list (arglist):

:arg *.cpp	All *.cpp files in current directory.
:argadd *.h	And all *.h files.
:arg	Optional: Display the current arglist.
:argdo %s/pattern/replace/ge | update	Search and replace in all files in arglist.

A similar procedure can perform the same operation on all wanted files in the current directory, and in all subdirectories (or in any specified tree of directories):

:arg **/*.cpp	All *.cpp files in and below current directory.
:argadd **/*.h	And all *.h files.
...	As above, use :arg to list files, or :argdo to change.
In the above, a forward slash was used in **/*.cpp. That works on all systems (Unix and Windows). If wanted, a backslash can be used on Windows systems.

Replacing current word
-----------------------
A common requirement is to replace the word under the cursor in a number of files. Rather than automating the process, it is best to use Vim's procedures. For example:

:arg *.cpp	All *.cpp files in directory.
:argadd *.h	And all *.h files.
...	Move cursor to word that is to be replaced.
*	Search for that exact word.
:argdo %s//replace/ge | update	Search and replace in all files in arglist.
In the above substitute command:

The search pattern is empty, so the last search is used.
Type your replacement text instead of replace. If the text is similar to the current word press Ctrl-R then Ctrl-W to insert that word into the command line, then change it.
Alternatively, you might try the following user command or mapping.

" Search for current word and replace with given text for files in arglist.
function! Replace(bang, replace)
  let flag = 'ge'
  if !a:bang
    let flag .= 'c'
  endif
  let search = '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'
  let replace = escape(a:replace, '/\&~')
  execute 'argdo %s/' . search . '/' . replace . '/' . flag
endfunction
command! -nargs=1 -bang Replace :call Replace(<bang>0, <q-args>)
nnoremap <Leader>r :call Replace(0, input('Replace '.expand('<cword>').' with: '))<CR>

For example:

:arg *.c	All *.c files in current directory.
:set hidden	Allow switching away from a changed buffer without saving.
:set autowriteall	Or, use this for automatic saving (instead of :set hidden).

...	Move cursor to word that is to be replaced.

:Replace whatever	Search and replace in all files in arglist; confirm each change.
:Replace! whatever	Same, but do not confirm each change.
:wa	Write all changed files (not needed if used :set autowriteall).
Instead of the :Replace command, you could use the mapping. Move the cursor to the word that is to be replaced and press \r (backslash, assuming the default Leader key, then r).

In the function, any special characters in the search word are escaped for generality, although that is unlikely to be needed since a word will not contain special characters. If the cursor is on the word old_text, the search pattern will be \<old_text\> so that only instances of the whole word are found.
---------------------------------------------------------
folds

zo		Open one fold under the cursor.
zO		Open all folds under the cursor recursively.
zc		Close one fold under the cursor.
zC		Close all folds under the cursor recursively.
zM		Close all folds: set 'foldlevel' to 0.
zR		Open all folds.  This sets 'foldlevel' to highest fold level.

MOVING OVER FOLDS
[z		Move to the start of the current open fold.
]z		Move to the end of the current open fold.
zj		Move downwards to the start of the next fold.
zk		Move upwards to the end of the previous fold.

---------------------------------------------------------
You can use the :redir command to redirect the output of an ex command to a register and then paste the contents of the register into a Vim buffer.

    :redir @a
    :set all
    :redir END

Now, register 'a' will have the output of the "set all" ex command. You can paste this into a Vim buffer, using "ap.
---------------------------------------------------------
infocmp | grep colors
vim "+runtime syntax/colortest.vim"
    Colors can be verified
    and highlight groups can be verified
    #when opened with colortest.vim, extra potential highlight groups are displayed
    :highlight
export TERM='xterm-256color'

#see vim Solarized plugin
---------------------------------------------------------

	You can also specify a color by its Red, Green and Blue values.
	The format is "#rrggbb", where
		"rr"	is the Red value
		"gg"	is the Green value
		"bb"	is the Blue value
	All values are hexadecimal, range from "00" to "ff".  Examples: >
  :highlight Comment guifg=#11f0c3 guibg=#ff00ff

*cterm-colors*
    NR-16   NR-8    COLOR NAME 
    0       0       Black
    1       4       DarkBlue
    2       2       DarkGreen
    3       6       DarkCyan
    4       1       DarkRed
    5       5       DarkMagenta
    6       3       Brown, DarkYellow
    7       7       LightGray, LightGrey, Gray, Grey
    8       0*      DarkGray, DarkGrey
    9       4*      Blue, LightBlue
    10      2*      Green, LightGreen
    11      6*      Cyan, LightCyan
    12      1*      Red, LightRed
    13      5*      Magenta, LightMagenta
    14      3*      Yellow, LightYellow
    15      7*      White
---------------------------------------------------------
vimdiff
    noremap \w :windo set wrap! <CR>
    \<F7> <Plug>ToggleDiffCharAllLines

To ignore white spaces
    :set diffopt+=iwhite

---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------

---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------
notepadd++
    Alt+Shift   select columns from multiple lines 
                edit columns on multiple lines 
    Ctrl+F      Find using regex
    Ctrl+R      Replace using regex
---------------------------------------------------------
strip all trailing whitespace
https://vi.stackexchange.com/a/456/1111
https://vi.stackexchange.com/questions/454/whats-the-simplest-way-to-strip-trailing-whitespace-from-all-lines-in-a-file/456#456

:%s/\s\+$//e
    :%s to run :substitute over the range %, which is the entire buffer.
    \s t match all whitespace characters.
    \+ to repeat them 1 or more times.
    $ to anchor at the end of the line.
    The e flag to not give an error if there is no match (i.e. the file is already without trailing whitespace).

---------------------------------------------------------
markdown (md)
https://github.com/tpope/vim-markdown

https://github.com/plasticboy/vim-markdown

-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------

END_VIM_HELP_FILE
